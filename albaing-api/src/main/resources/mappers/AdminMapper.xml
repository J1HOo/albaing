<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jobjob.albaing.mapper.AdminMapper">

    <!--  이하 모든 "select *" 구문 수정할 것-->
    <!--  구문마다 목적, 개요 주석 달 것-->

    <!--  개인 회원 조회 : 이름, 이메일, 전화번호로 검색 -->
    <!--  String userName, userEmail, userPhone 을 받아 해당 항목과 부분 이상 일치하는 항목 찾기 -->
    <!--  sortOrderBy (이름, 전화번호, 가입일) 를 받아 정렬 기준을 정함 -->
    <!--  isDESC 받아 오름차순, 내림차순을 정함 -->
    <!--  List<User>(조건을 만족하는 사용자 리스트)로 반환 -->
    <select id="adminSearchUsers">
        SELECT *
        FROM USERS
        <where>
            <trim prefixOverrides="AND">
                <if test="userName != null and userName != ''">
                    AND user_name LIKE CONCAT('%', #{userName}, '%')
                </if>
                <if test="userEmail != null and userEmail != ''">
                    AND user_email LIKE CONCAT('%', #{userEmail}, '%')
                </if>
                <if test="userPhone != null and userPhone != ''">
                    AND user_phone LIKE CONCAT('%', #{userPhone}, '%')
                </if>
            </trim>
        </where>
        <trim prefix="ORDER BY">
            <if test="sortOrderBy == '이름'">
                user_name
            </if>
            <if test="sortOrderBy == '전화번호'">
                user_phone
            </if>
            <if test="sortOrderBy == '가입일'">
                user_created_at
            </if>
            <if test="isDESC == true">
                DESC
            </if>
        </trim>
    </select>


    <!--  개인 이력서 조회 : 제목, 직업 분류, 근무 형태로 검색 -->
    <!--  String userName, resumeTitle, resumeJobCategory, resumeJobType 을 받아 해당 항목과 부분 이상 일치하는 항목 찾기-->
    <!--  sortOrderBy (이름, 전화번호, 제목) 를 받아 정렬 기준을 정함 -->
    <!--  isDESC 받아 오름차순, 내림차순을 정함 -->
    <!--  개인 이력서 목록 전체를 List<JoinUserWithResume>로 반환-->
    <select id="adminSearchResumes">
        SELECT *
        FROM RESUMES
        JOIN USERS on USERS.user_id = RESUMES.user_id
        <where>
            <trim prefixOverrides="AND">
                <if test="userName != null and userName != ''">
                    AND USERS.user_name LIKE CONCAT('%', #{userName}, '%')
                </if>
                <if test="resumeTitle != null and resumeTitle != ''">
                    AND RESUMES.resume_title LIKE CONCAT('%', #{resumeTitle}, '%')
                </if>
                <if test="resumeJobCategory != null and resumeJobCategory != ''">
                    AND RESUMES.resume_job_category LIKE CONCAT('%', #{resumeJobCategory}, '%')
                </if>
                <if test="resumeJobType != null and resumeJobType != ''">
                    AND RESUMES.resume_job_type LIKE CONCAT('%', #{resumeJobType}, '%')
                </if>
            </trim>
        </where>
        <trim prefix="ORDER BY">
            <if test="sortOrderBy == '이름'">
                USERS.user_name
            </if>
            <if test="sortOrderBy == '전화번호'">
                USERS.user_phone
            </if>
            <if test="sortOrderBy == '제목'">
                RESUMES.resume_title
            </if>
            <if test="isDESC == true">
                DESC
            </if>
        </trim>
    </select>

    <!--  공고 지원 조회 : 지원자명, 법인명, 공고 제목 으로 검색 -->
    <!--  String userName, companyName, jobPostTitle 을 받아 해당 항목과 부분 이상 일치하는 항목 찾기-->
    <!--  sortOrderBy (지원자명, 법인명, 지원일) 를 받아 정렬 기준을 정함 -->
    <!--  isDESC 받아 오름차순, 내림차순을 정함 -->
    <!--  개인 이력서 목록 전체를 List<ViewJobApplication>로 반환-->
    <!--  JOIN 지나치게 많은 관계로 DB 정리 필요할 것 같아 보임 -->
    <select id="adminSearchJobApplications">
        SELECT *
        FROM VIEW_JOB_APPLICATIONS
        <where>
            <trim prefixOverrides="AND">
                <if test="userName != null and userName != ''">
                    AND user_name LIKE CONCAT('%', #{userName}, '%')
                </if>
                <if test="companyName != null and companyName != ''">
                    AND company_name LIKE CONCAT('%', #{companyName}, '%')
                </if>
                <if test="jobPostTitle != null and jobPostTitle != ''">
                    AND job_post_title LIKE CONCAT('%', #{jobPostTitle}, '%')
                </if>
            </trim>
        </where>
        <trim prefix="ORDER BY">
            <if test="sortOrderBy == '지원자명'">
                user_name
            </if>
            <if test="sortOrderBy == '법인명'">
                company_name
            </if>
            <if test="sortOrderBy == '지원일'">
                application_at
            </if>
            <if test="isDESC == true">
                DESC
            </if>
        </trim>
    </select>

    <!--  기업 회원 조회 : 법인명, 대표자명, 전화번호, 사업자등록번호 로 검색, 가입 승인 대기중인 기업 회원 조회에서도 사용 -->
    <!--  String companyName, companyOwnerName, companyPhone, companyRegistrationNumber 을 받아 해당 항목과 부분 이상 일치하는 항목 찾기-->
    <!--  sortOrderBy (법인명, 대표자명, 사업자등록번호) 를 받아 정렬 기준을 정함 -->
    <!--  isDESC 받아 오름차순, 내림차순을 정함 -->
    <!--  개인 이력서 목록 전체를 List<COMPANIES>로 반환-->
    <select id="adminSearchCompanies">
        SELECT *
        FROM COMPANIES
        <where>
            <trim prefixOverrides="AND">
                <if test="companyName != null and companyName != ''">
                    AND company_name LIKE CONCAT('%', #{companyName}, '%')
                </if>
                <if test="companyOwnerName != null and companyOwnerName != ''">
                    AND company_owner_name LIKE CONCAT('%', #{companyOwnerName}, '%')
                </if>
                <if test="companyPhone != null and companyPhone != ''">
                    AND company_phone LIKE CONCAT('%', #{companyPhone}, '%')
                </if>
                <if test="companyRegistrationNumber != null and companyRegistrationNumber != ''">
                    AND company_registration_number LIKE CONCAT('%', #{companyRegistrationNumber}, '%')
                </if>
            </trim>
        </where>
        <trim prefix="ORDER BY">
            <if test="sortOrderBy == '법인명'">
                company_name
            </if>
            <if test="sortOrderBy == '대표자명'">
                company_owner_name
            </if>
            <if test="sortOrderBy == '사업자등록번호'">
                company_registration_number
            </if>
            <if test="isDESC == true">
                DESC
            </if>
        </trim>
    </select>

    <!-- 공고 조회 : 법인명, 공고 제목, 공고 상태 로 검색 -->
    <!-- String companyName, jobPostTitle, jobPostStatus 을 받아 해당 항목과 부분 이상 일치하는 항목 찾기-->
    <!-- sortOrderBy (법인명, 공고 제목, 공고 마감일) 를 받아 정렬 기준을 정함 -->
    <!-- isDESC 받아 오름차순, 내림차순을 정함 -->
    <!-- 개인 이력서 목록 전체를 List<JoinJobPostWithCompany>로 반환-->
    <select id="adminSearchJobPosts">
        SELECT *
        FROM JOB_POSTS
        JOIN COMPANIES on COMPANIES.company_id = JOB_POSTS.company_id
        <where>
            <trim prefixOverrides="AND">
                <if test="companyName != null and companyName != ''">
                    AND company_name LIKE CONCAT('%', #{companyName}, '%')
                </if>
                <if test="jobPostTitle != null and jobPostTitle != ''">
                    AND job_post_title LIKE CONCAT('%', #{jobPostTitle}, '%')
                </if>
                <if test="jobPostStatus != null and jobPostStatus != ''">
                    AND job_post_status LIKE CONCAT('%', #{jobPostStatus}, '%')
                </if>
            </trim>
        </where>
        <trim prefix="ORDER BY">
            <if test="sortOrderBy == '법인명'">
                COMPANIES.company_name
            </if>
            <if test="sortOrderBy == '공고 제목'">
                JOB_POSTS.job_post_title
            </if>
            <if test="sortOrderBy == '공고 마감일'">
                JOB_POSTS.job_post_due_date
            </if>
            <if test="isDESC == true">
                DESC
            </if>
        </trim>
    </select>

    <!-- 공지 조회  -->
    <!-- isDESC 받아 오름차순, 내림차순을 정함 -->
    <!-- 개인 이력서 목록 전체를 List<Notice>로 반환-->
    <select id="adminSearchNotices">
        SELECT *
        FROM Notices
        ORDER BY notice_created_at DESC
    </select>

    <!-- 개인 회원 상세 정보 조회 -->
    <!-- int userId 를 받아 일치하는 유저의 상세정보 조회 -->
    <!-- 개인정보 전체를 단일 User 로 반환 -->
    <select id="adminUserDetail">
        select *
        from USERS
        where user_id = #{userId}
    </select>

    <!-- 개인 회원 삭제 : 실행할 때 이력서 삭제도 같이 실행 -->
    <!-- int userId 를 받아 일치하는 유저 삭제 -->
    <!-- 반환값 없음 -->
    <delete id="adminUserDelete">
        delete
        from USERS
        where user_id = #{userId}
    </delete>

    <!-- 이력서 상세 정보 조회 -->
    <!-- int resumeId 를 받아 일치하는 이력서 상세정보 표기 -->
    <!-- 이력서 전체를 단일 Resume 로 반환 -->
    <select id="adminResumeDetail">
        select *
        from RESUMES
        where resume_id = #{resumeId}
    </select>

    <!-- 이력서 삭제 : 개인 회원 삭제할 때 같이 실행 -->
    <!-- int userId 를 받아 일치하는 이력서 삭제 -->
    <!-- 반환값 없음 -->
    <delete id="adminResumeDelete">
        delete
        from RESUMES
        where user_id = #{userId}
    </delete>

    <!-- 기업 회원 상세정보 조회 -->
    <!-- int companyId 를 받아 일치하는 기업 회원 상세정보 조회 -->
    <!-- 기업 정보 전체를 단일 Company 로 반환 -->
    <select id="adminCompanyDetail">
        select *
        from COMPANIES
        where company_id = #{companyId}
    </select>

    <!-- 기업 회원 삭제 : 실행할 때 공고 상태 변경도 같이 실행 -->
    <!-- int companyID 를 받아 일치하는 기업 회원 삭제 -->
    <!-- 반환값 없음 -->
    <delete id="adminCompanyDelete">
        delete
        from COMPANIES
        where company_id = #{companyId}
    </delete>

    <!-- 공고 상세 정보 조회 -->
    <!-- int jobPostId 를 받아 일치하는 공고 상세정보 조회 -->
    <!-- 공고 정보 전체를 단일 Resume 로 반환 -->
    <select id="adminJobPostDetail">
        select *
        from JobPosts
        where job_post_id = #{jobPostId}
    </select>

    <!-- 공고 삭제 -->
    <!-- int jobPostId 를 받아 일치하는 공고 삭제 -->
    <!-- 반환값 없음 -->
    <delete id="adminJobPostDelete">
        delete
        from JobPosts
        where job_post_id = #{jobPostId}
    </delete>

    <!-- 공고 상태 변경(숨김처리) : 기업 회원 삭제할 때 같이 실행 -->
    <!-- int companyId 를 받아 일치하는 공고들 모두 삭제 -->
    <!-- 반환값 없음 -->
    <update id="adminJobPostStatusChange">
        update JobPosts
        set job_post_status = false
        where company_id = #{companyId}
    </update>



</mapper>